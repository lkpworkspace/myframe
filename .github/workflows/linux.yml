name: Linux

on: [push, pull_request]

jobs:
  Ubuntu-latest:
    name: GCC-C++${{matrix.std}}-${{matrix.build_type}}
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        build_type: [Release, Debug]
        std: [17, 20]

    steps:
    - uses: actions/checkout@v3
    - run: sudo apt update
    - run: sudo apt install build-essential cmake ninja-build
    - run: sudo apt install libunwind-dev libgflags-dev

    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        version: 1.10.0

    - name: Cache jsoncpp
      id: cache-jsoncpp
      uses: actions/cache@v2
      with:
        path: jsoncpp/
        key: ${{runner.os}}-jsoncpp-1.9.5

    - name: Download jsoncpp
      if: steps.cache-jsoncpp.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/open-source-parsers/jsoncpp/archive/refs/tags/1.9.5.tar.gz
        tar xvf 1.9.5.tar.gz

    - name: Build jsoncpp
      if: steps.cache-jsoncpp.outputs.cache-hit != 'true'
      run: |
          cmake -S jsoncpp-1.9.5 -B build-jsoncpp \
            -DBUILD_SHARED_LIBS=ON \
            -DBUILD_STATIC_LIBS=OFF \
            -DBUILD_OBJECT_LIBS=OFF \
            -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/jsoncpp \
            -DJSONCPP_WITH_TESTS=OFF \
            -DJSONCPP_WITH_POST_BUILD_UNITTEST=OFF \
            -DJSONCPP_WITH_PKGCONFIG_SUPPORT=OFF \
            -G Ninja
          cmake --build build-jsoncpp --target install

    - name: Cache glog
      id: cache-glog
      uses: actions/cache@v2
      with:
        path: glog/
        key: ${{runner.os}}-glog-0.6.0

    - name: Download glog
      if: steps.cache-glog.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/google/glog/archive/refs/tags/v0.6.0.tar.gz
        tar xvf v0.6.0.tar.gz

    - name: Build glog
      if: steps.cache-glog.outputs.cache-hit != 'true'
      run: |
          cmake -S glog-0.6.0 -B build-glog \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/glog \
            -DWITH_PKGCONFIG=OFF \
            -DWITH_GTEST=OFF \
            -G Ninja
          cmake --build build-glog --target install

    - name: Configure CMake
      env:
        # unit test option:
        #   -fno-omit-frame-pointer -fsanitize=address -fsanitize=undefined
        CXXFLAGS: ${{env.CXXFLAGS}} -Wall -Wextra -Werror -pedantic-errors -Wswitch-default -Wfloat-equal -Wshadow -Wcast-qual -Wnon-virtual-dtor -Wold-style-cast -Woverloaded-virtual -Wsign-promo -Wsuggest-override -Wextra-semi
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
          cmake -S . -B ${{github.workspace}}/build_${{matrix.build_type}} \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_CXX_STANDARD=${{matrix.std}} \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON \
            -DMYFRAME_USE_CV=OFF \
            -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
            -DCMAKE_PREFIX_PATH="${{github.workspace}}/jsoncpp;${{github.workspace}}/glog" \
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install \
            -G Ninja \
            -Werror

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build_${{matrix.build_type}} --config ${{matrix.build_type}}

    - name: Install
      run: |
        cmake --build build_${{matrix.build_type}} \
          --config ${{matrix.build_type}} \
          --target install
